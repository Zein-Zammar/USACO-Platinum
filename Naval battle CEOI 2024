#include "bits/stdc++.h"
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define debug(...)
#endif

using arr = array<int, 3>;

const int N = 2e5 + 5; 

char c[N];
bool dead[N];
pair<int, int> a[N];
priority_queue<arr, vector<arr>, greater<arr>> pq; 

struct dat {
  pair<int, int> cmp1;//sort on (sum, diff, or equality)
  pair<int, int> cmp2;//break ties with (sort on y or x)
  char c1, c2; 
  vector<int> ind;
  vector<int> pre, nxt;
  int getVal(pair<int, int> x, pair<int, int> y) {
    return x.first * y.first + x.second * y.second; 
  };
  bool can(int i, int j) {
    return getVal(a[i], cmp1) == getVal(a[j], cmp1) && c[i] == c1 && c[j] == c2;
  }
  int dist(int i, int j) {
    return abs(a[i].first - a[j].first) + abs(a[i].second - a[j].second);
  }
  void init() {
    int n = (int) ind.size();
    pre.resize(N);
    nxt.resize(N); 
    sort(ind.begin(), ind.end(), [&](int i, int j) {
      int z1 = getVal(a[i], cmp1), z2 = getVal(a[j], cmp1);
      if (z1 != z2) {
        return z1 < z2;
      } else {
        return getVal(a[i], cmp2) < getVal(a[j], cmp2);
      }
    });
    for (int i = 1; i < n; ++i) {
      pre[ind[i]] = ind[i - 1];
      nxt[ind[i - 1]] = ind[i];
      if (can(ind[i - 1], ind[i])) {
        pq.push({dist(ind[i - 1], ind[i]), ind[i - 1], ind[i]});
      }
    }
  }
  void rem(int i) {
    if (pre[i] != 0) {
      nxt[pre[i]] = 0;
    }
    if (nxt[i] != 0) {
      pre[nxt[i]] = 0;
    }
    if (pre[i] != 0 && nxt[i] != 0) {
      nxt[pre[i]] = nxt[i];
      pre[nxt[i]] = pre[i];
      if (can(pre[i], nxt[i])) {
        pq.push({dist(pre[i], nxt[i]), pre[i], nxt[i]});        
      }
    }
  }
}; 

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i].first >> a[i].second >> c[i];
  }
  dat d[6];
  d[0].cmp1 = {1, -1}; d[0].cmp2 = {0, 1}; d[0].c1 = 'E', d[0].c2 = 'N';
  d[1].cmp1 = {1, 1}; d[1].cmp2 = {0, 1}; d[1].c1 = 'W', d[1].c2 = 'N';
  d[2].cmp1 = {1, 1}; d[2].cmp2 = {0, 1}; d[2].c1 = 'S', d[2].c2 = 'E';
  d[3].cmp1 = {1, -1}; d[3].cmp2 = {0, 1}; d[3].c1 = 'S'; d[3].c2 = 'W';
  d[4].cmp1 = {1, 0}; d[4].cmp2 = {0, 1}; d[4].c1 = 'S'; d[4].c2 = 'N';
  d[5].cmp1 = {0, 1}; d[5].cmp2 = {1, 0}; d[5].c1 = 'E'; d[5].c2 = 'W';
  map<char, vector<int>> mp = {
    {'N', {0, 1, 4}}, 
    {'E', {0, 2, 5}}, 
    {'S', {2, 3, 4}},
    {'W', {1, 3, 5}}
  };
  for (int i = 1; i <= n; ++i) {
    for (int j : mp[c[i]]) {
      d[j].ind.push_back(i); 
    }
  }
  for (int i = 0; i < 6; ++i) {
    d[i].init(); 
  }
  while (!pq.empty()) {
    int w = pq.top()[0];
    vector<int> toErase;
    while (!pq.empty() && pq.top()[0] == w) {
      auto [_, i, j] = pq.top();
      pq.pop();
      if (!dead[i] && !dead[j]) {
        toErase.push_back(i);
        toErase.push_back(j); 
      }
    }
    sort(toErase.begin(), toErase.end());
    toErase.resize(unique(toErase.begin(), toErase.end()) - toErase.begin()); 
    for (int i : toErase) {
      dead[i] = true; 
      for (int j : mp[c[i]]) {
        d[j].rem(i);
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    if (!dead[i]) {
      cout << i << '\n'; 
    }
  }
  return 0;
}
