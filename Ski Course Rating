#include <bits/stdc++.h>
#define int long long
using namespace std;

const int N = 602;

int n, m, t;
int a[N][N]; 
bool f[N * N]; 

int p[N * N * 3]; 
int sz[N * N * 3];
int val[N * N * 3]; 
vector<int> g[N * N * 3]; 

inline int get (int v) {
  return p[v] = (p[v] == v ? v : get(p[v]));
}

int cur; 
void unite (int u, int v, int tval) {
  u = get(u); v = get(v); 
  if (u == v) return; 
  p[u] = p[v] = p[cur] = cur;
  sz[cur] = sz[u] + sz[v]; 
  g[cur].push_back(u);
  g[cur].push_back(v);
  val[cur] = tval; 
  cur++; 
}

int ans = 0; 
void Dfs (int v, int mn = INT_MAX) {
  if (sz[v] >= t) {
    mn = min(mn, val[v]); 
  }
  if (g[v].empty()) {
    ans += mn * f[v]; 
    return;
  }
  for (int u : g[v]) {
    Dfs(u, mn);
  }
}

signed main() {
  freopen("skilevel.in", "r", stdin);
  freopen("skilevel.out", "w", stdout);
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> n >> m >> t;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      cin >> a[i][j]; 
    }
  }  
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      bool on;
      cin >> on;
      f[i * m + j] = on;
      sz[i * m + j] = 1;
      p[i * m + j] = i * m + j; 
    }
  }
  cur = n * m; 
  vector<array<int, 5>> e; 
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (i + 1 < n) {
        e.push_back({abs(a[i][j] - a[i + 1][j]), i, j, i + 1, j});
      }
      if (j + 1 < m) {
        e.push_back({abs(a[i][j] - a[i][j + 1]), i, j, i, j + 1});
      }
    }
  }
  sort(e.begin(), e.end());
  for (int i = 0; i < (int) e.size(); ++i) {
    unite(e[i][1] * m + e[i][2], e[i][3] * m + e[i][4], e[i][0]);
  }
  Dfs(cur - 1);
  cout << ans << '\n';
  return 0;
}
