#include "bits/stdc++.h"
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define deb(...)
#endif

const int N = 302;
const int M = N * N;

int dp[N][N];
int mw[N][N];
int best[N][N][N];
int w[N], lc[N], rc[N];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  freopen("pieaters.in", "r", stdin);
  freopen("pieaters.out", "w", stdout);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> w[i] >> lc[i] >> rc[i];
    mw[lc[i]][rc[i]] = max(mw[lc[i]][rc[i]], w[i]); 
  }
  for (int l = n; l >= 1; --l) {
    for (int r = l; r <= n; ++r) {
      for (int i = l; i <= r; ++i) {
        best[l][r][i] = max({best[l + 1][r][i], best[l][r - 1][i], mw[l][r]});
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    dp[i][i] = best[i][i][i];
  }
  for (int len = 2; len <= n; ++len) {    
    for (int l = 1; l + len <= n + 1; ++l) {
      int r = l + len - 1; 
      dp[l][r] = max(dp[l + 1][r] + best[l][r][l], dp[l][r - 1] + best[l][r][r]);
      for (int i = l + 1; i < r; ++i) {
        dp[l][r] = max({dp[l][r], dp[l][i - 1] + dp[i + 1][r] + best[l][r][i]});
      }
    }
  }
  cout << dp[1][n] << '\n'; 
  return 0;
}
