#include "bits/stdc++.h"
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define deb(...)
#endif

const int N = 18;

long long ans[1 << N]; 
long long dp[1 << N][N];

signed main(){
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  vector<vector<bool>> adj(n, vector<bool> (n)); 
  for (int i = 0; i < n; ++i) {
    bool f = false;
    for (int j = 0; j < n; ++j) {
      int x;
      cin >> x;
      --x;
      if (!f) adj[i][x] = true;  
      if (x == i) f = true;
    }
  }
  ans[0] = 1; 
  for (int i = 0; i < n; ++i) {
    dp[1 << i][i] = 1; 
  }
  for (int i = 0; i < n; ++i) {
    for (int mask = 1 << i; mask < 1 << (i + 1); ++mask) {
      for (int la = 0; la <= i; ++la) {
        if (!(mask >> la & 1)) continue;
        for (int nxt = 0; nxt < i; ++nxt) {// extend the cycle
          if ((mask >> nxt & 1) || !adj[la][nxt]) continue;
          dp[mask | (1 << nxt)][nxt] += dp[mask][la];
        }
        //complete the cycle
        if (adj[la][i]) {
          ans[mask] += dp[mask][la]; 
        }
      }
      //start a new cycle
      for (int nxt = i + 1; nxt < n; ++nxt) {
        dp[mask | (1 << nxt)][nxt] += ans[mask];
      }
    }
  }
  int q;
  cin >> q;
  while (q--) {
    string s;
    cin >> s;
    int g = 0, h = 0;
    for (int i = 0; i < n; ++i) {
      if (s[i] == 'H') h |= 1 << i;
      else g |= 1 << i;
    }
    cout << ans[h] * ans[g] << '\n'; 
  }
  return 0;
}
