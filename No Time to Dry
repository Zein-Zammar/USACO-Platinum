#include "bits/stdc++.h"
#define int long long
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define deb(...)
#endif

const int N = 200005;

int n, q;
int a[N];
int la[N];
int ans[N]; 
int seg[N << 1];
vector<pair<int,int>> vec[N]; 

void upd (int nd, int l, int r, int p, int v) {
	if (l == r) {
		seg[nd] = v;
		return;
	}
	int mid = (l + r) >> 1;
	int rs = nd + ((mid - l + 1) << 1);
	if (p <= mid) {
		upd(nd + 1, l, mid, p, v);
	} else {
		upd(rs, mid + 1, r, p, v); 
	}
	seg[nd] = seg[nd + 1] + seg[rs];
}
void upd (int p, int v) {
	upd(0, 0, n - 1, p, v); 
}

int qry (int nd, int l, int r, int s, int e) {
	if (l >= s && r <= e) {
		return seg[nd];
	}
	int mid = (l + r) >> 1;
	int rs = nd + ((mid - l + 1) << 1);
	if (mid >= e) {
		return qry(nd + 1, l, mid, s, e); 
	} else {
		if (mid < s) {
			return qry(rs, mid + 1, r, s, e); 
		} else {
			return qry(nd + 1, l, mid, s, e) + qry(rs, mid + 1, r, s, e);
		}
	}
}
int qry (int l, int r) {
	return qry(0, 0, n - 1, l, r);
}

signed main(){
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cin >> n >> q;
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
		--a[i];
	}
	for (int i = 0; i < q; ++i) {
		int l, r;
		cin >> l >> r;
		--l, --r;
		vec[l].emplace_back(r, i); 
	}
	stack<int> st; 
	for (int l = n - 1; l >= 0; --l) {
		while (!st.empty() && a[st.top()] > a[l]) {
			st.pop(); 
		}
		if (la[a[l]] && st.top() == la[a[l]]) {
			upd(la[a[l]], 0); 
		}
		upd(l, 1); 
		la[a[l]] = l; 
		st.push(l);
		for (auto [r, i] : vec[l]) {
			ans[i] = qry(l, r); 
		} 
	}
	for (int i = 0; i < q; ++i) {
		cout << ans[i] << '\n';
	}
	return 0;
}
