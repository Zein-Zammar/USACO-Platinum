#include <bits/stdc++.h>
#define lx (nd<<1)
#define rx ((nd<<1)|1)
using namespace std;

const int N = 2e5+5;
int n,seg[N<<2],en[N],st[N];
deque<int>a,b;

void upd(int nd,int l,int r,int p){
	if(l == r)return void(seg[nd] = 1);
	int mid = (l + r) >> 1;
	if(p <= mid)upd(lx,l,mid,p);
	else upd(rx,mid+1,r,p);
	seg[nd] = seg[lx]+seg[rx];
}

int qry(int nd,int l,int r,int s,int e){
	if(l > e || r < s)return 0;
	if(l >= s && r <= e)return seg[nd];
	int mid = (l + r) >> 1;
	return qry(lx,l,mid,s,e)+qry(rx,mid+1,r,s,e);
}

signed main(){

	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	freopen("mincross.in","r",stdin);
	freopen("mincross.out","w",stdout);

	cin>>n;
	a.resize(n+1),b.resize(n+1);
	vector<int>v,la(n+1,-1);
	for(int i=1;i<=n;++i){
		cin>>a[i];
		st[a[i]] = i;
		v.push_back(a[i]);
	}
	for(int i=1;i<=n;++i){
		cin>>b[i];
		en[b[i]] = i;
		v.push_back(b[i]);
	}
	long long ans = 0; 
	for(int i=0;i<n*2;++i){
		if(la[v[i]] == -1)la[v[i]] = i;
		else{
			ans += qry(1,0,n,la[v[i]],i);
			upd(1,0,n,la[v[i]]);
		}
	}	
	int fi = a.front();
	long long tmp = ans; 
	while(1){
		a.push_front(a.back());
		a.pop_back();
		if(a.front() == fi)break; 
		tmp += en[a.front()]-1;
		tmp -= (n-en[a.front()]);
		ans = min(ans,tmp);
	}
	fi = b.front();
	while(1){
		b.push_front(b.back());
		b.pop_back();
		if(b.front() == fi)break;
		tmp += st[b.front()]-1; 
		tmp -= (n-st[b.front()]);
		ans = min(ans,tmp);
	}
	cout<<ans; 

}
